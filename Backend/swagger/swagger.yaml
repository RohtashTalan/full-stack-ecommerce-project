openapi: 3.0.0
info:
  title: Ecommerce Api
  description: Api to personal ecommerce app.
  version: 1.0.0
  contact:
    name: API Support - Rohtash Talan
    email: rohtashtalancompany@gmail.com
    url: https://rohtashtalan.com


servers:
  - url: http://localhost:4000/api/v1
    description: Api server for localhost ecommerce app
  - url: http://192.168.0.111:4000/api/v1
    description: Api server for localhost ecommerce app

tags:
  - name: Auth
    description: Everything about User
    externalDocs:
      url: http://localhost:4000/api/v1/auth
  - name: Collection
    description: user must be loggedIn to access Collection
    externalDocs:
      url: http://localhost:4000/api/v1/collection
  - name: Product
    description: Everything about Products
    externalDocs:
      url: http://localhost:4000/api/v1/product
  - name: Order
    description: Everything about Order
    externalDocs:
      url: http://localhost:4000/api/v1/order
  - name: Coupon
    description: Everything about Coupon
    externalDocs:
      url: http://localhost:4000/api/v1/coupon


components:
  securitySchemes:
    cookieAuth: 
        type: apiKey
        in: cookie
        token: token  # cookie name
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth: 
      type: http
      scheme: bearer






paths:

# User and Auth related APIs
  /auth/signup:
    post:
      tags:
        - Auth
      summary: Register user on the server
      requestBody:
        description: name, email, password required to register
        required: true
        content:
          application/json:
            schema: 
              type: object
              properties:
                  name:
                    type: string
                  email: 
                    type: string
                  password:
                    type: string
      responses: 
        '200':
          description: Success - return object
          content:
            application/json: 
              schema:
                type: object
                properties:
                  success:
                    type: string
                  token: 
                    type: string
                  user:
                    type: object
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login user on the server
      requestBody:
        description: email, password required to login
        required: true
        content:
          application/json:
            schema: 
              type: object
              properties:
                  email: 
                    type: string
                    default: working@vijkom.com
                  password:
                    type: string
                    default: working321
      responses: 
        '200':
          description: Success - return object
          content:
            application/json: 
              schema:
                type: object
                properties:
                  success:
                    type: string
                  token: 
                    type: string
                  user:
                    type: object
  /auth/logout:
    get:
      tags:
        - Auth
      summary: Logout user on the server
      responses: 
        '200':
          description: Success - return object
          content:
            application/json: 
              schema:
                type: object
                properties:
                  success:
                    type: string
                  message: 
                    type: string
  /auth/profile:
    get:
      tags:
        - Auth
      summary: return Profile of user from the server
      responses: 
        '200':
          description: Success - return object
          content:
            application/json: 
              schema:
                type: object
                properties:
                  success:
                    type: string
                  user: 
                    type: object
  /auth/password/forgot:
    post:
      tags:
        - Auth
      summary: send email to rest password on the server
      requestBody:
        description: email required to request forgot password
        required: true
        content:
          application/json:
            schema: 
              type: object
              properties:
                  email: 
                    type: string
      responses: 
        '200':
          description: Success - return object
          content:
            application/json: 
              schema:
                type: object
                properties:
                  success:
                    type: string
                  message: 
                    type: string     
  /auth/password/reset/{token}:
    post:
      tags:
        - Auth
      summary: reset password with reset token password on the server
      parameters:
        - name: token
          in: path
          description: reset token
          required: true
          schema:
            type: string
      requestBody:
        description: password, confirm password required to reset password
        required: true
        content:
          application/json:
            schema: 
              type: object
              properties:
                  password: 
                    type: string
                  confirmPassword: 
                    type: string
      responses: 
        '200':
          description: Success - return object
          content:
            application/json: 
              schema:
                type: object
                properties:
                  success:
                    type: string
                  message: 
                    type: string
  /auth/password/update:
    post:
      tags:
        - Auth
      summary: update password on the server
      requestBody:
        description: user should be logined and then oldPassword, newPassword required to update password
        required: true
        content:
          application/json:
            schema: 
              type: object
              properties:
                  oldPassword: 
                    type: string
                  newPassword: 
                    type: string
      responses: 
        '200':
          description: Success - return object
          content:
            application/json: 
              schema:
                type: object
                properties:
                  success:
                    type: string
                  message: 
                    type: string




# Collection APIs
  /collection/create:
      post:
        tags:
          - Collection
        summary: Register user on the server
        requestBody:
          description: name of collection
          required: true
          content:
            application/json:
              schema: 
                type: object
                properties:
                    name:
                      type: string
        responses: 
          '200':
            description: Success - return object
            content:
              application/json: 
                schema:
                  type: object
                  properties:
                    success:
                      type: string
                    message: 
                      type: string
                    collection:
                      type: object
  /collection/update/{collectionId}:
    put:
      tags:
        - Collection
      summary: Update Collection by collectionId
      parameters:
        - name: collectionId
          in: path
          description: update Collection
          required: true
          schema:
            type: string
      requestBody:
        description: new name of collection required
        required: true
        content:
          application/json:
            schema: 
              type: object
              properties:
                  name: 
                    type: string
      responses: 
        '200':
          description: Success - return object
          content:
            application/json: 
              schema:
                type: object
                properties:
                  success:
                    type: string
                  message: 
                    type: string
                  updatedCollection:
                    type: object
  /collection:
    get:
      tags:
        - Collection
      summary: delete Collection by collectionId
      responses: 
        '200':
          description: Success - return object
          content:
            application/json: 
              schema:
                type: object
                properties:
                  success:
                    type: string
                  message: 
                    type: string
                  collections:
                    type: object
  /collection/delete/{collectionId}:
    delete:
      tags:
        - Collection
      summary: delete Collection by collectionId
      parameters:
        - name: collectionId
          in: path
          description: Delete Collection
          required: true
          schema:
            type: string
      responses: 
        '200':
          description: Success - return object
          content:
            application/json: 
              schema:
                type: object
                properties:
                  success:
                    type: string
                  message: 
                    type: string
                  deletedCollection:
                    type: object
  



# Product APIs
  /product/add:
      post:
        tags:
          - Product
        summary: Add Product
        requestBody:
          description: add product to of collection
          required: true
          content:
            application/json:
              schema: 
                type: object
                properties:
                    name:
                      type: string
                    price:
                      type: number
                    description:
                      type: string
                    photos:
                      type: array
                      items:
                        type: object
                        properties:
                          secure_url:
                            type: string
                    stock:
                      type: number
                    sold:
                      type: number
                    colectionId:
                      type: string
        responses: 
          '200':
            description: Success - return object
            content:
              application/json: 
                schema:
                  type: object
                  properties:
                    success:
                      type: string
                    product: 
                     type: object
  /product/single/:
    post:
      tags:
        - Product
      summary: get product by product id
      requestBody:
        description: returns the product based on id
        required: true
        content:
          application/json:
            schema: 
              type: object
              properties:
                  productId: 
                    type: string
      responses: 
        '200':
          description: Success - return object
          content:
            application/json: 
              schema:
                type: object
                properties:
                  success:
                    type: string
                  product: 
                    type: array
  /product:
    get:
      tags:
        - Product
      summary: Get all Products
      responses: 
        '200':
          description: Success - return object
          content:
            application/json: 
              schema:
                type: object
                properties:
                  success:
                    type: string
                  products:
                    type: object




# Order APIs
  /order/add:
      post:
        tags:
          - Order
        summary: Add Order to user's Account
        requestBody:
          description: add product to of collection
          required: true
          content:
            application/json:
              schema: 
                type: object
                properties:
                    productArray:
                      type: array
                      items:
                        type: object
                        properties:
                          productId:
                            type: string
                          count:
                            type: number
                            default: 1
                    couponCode:
                      type: string
                    address:
                      type: string
                    phoneNumber:
                      type: number
        responses: 
          '200':
            description: Success - return object
            content:
              application/json: 
                schema:
                  type: object
                  properties:
                    success:
                      type: string
                    product: 
                     type: object
  



# Coupons APIs
  /coupon/add:
      post:
        tags:
          - Coupon
        summary: add coupon to database
        requestBody:
          description: name of coupon
          required: true
          content:
            application/json:
              schema: 
                type: object
                properties:
                    code:
                      type: string
                    discount:
                      type: number
        responses: 
          '200':
            description: Success - return object
            content:
              application/json: 
                schema:
                  type: object
                  properties:
                    success:
                      type: string
                    newCoupon: 
                      type: string
  /coupon//delete/{couponId}:
    delete:
      tags:
        - Coupon
      summary: delete coupon by couponId
      parameters:
        - name: couponId
          in: path
          description: delete coupon
          required: true
          schema:
            type: string
      responses: 
        '200':
          description: Success - return object
          content:
            application/json: 
              schema:
                type: object
                properties:
                  success:
                    type: string
                  deletedCoupon:
                    type: object
  /coupon:
    get:
      tags:
        - Coupon
      summary: get all coupon
      responses: 
        '200':
          description: Success - return object
          content:
            application/json: 
              schema:
                type: object
                properties:
                  success:
                    type: string
                  coupons:
                    type: object
  /coupon//deactive/{couponId}:
    put:
      tags:
        - Coupon
      summary: deactivate coupon by couponId
      parameters:
        - name: couponId
          in: path
          description: deactivate coupon
          required: true
          schema:
            type: string
      responses: 
        '200':
          description: Success - return object
          content:
            application/json: 
              schema:
                type: object
                properties:
                  success:
                    type: string
                  deactive:
                    type: object
  
